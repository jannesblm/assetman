// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT
const go = {
  "auth": {
    "service": {
      /**
       * Authenticate
       * @param {string} arg1 - Go Type: string
       * @param {string} arg2 - Go Type: string
       * @returns {Promise<User|Error>}  - Go Type: storage.User
       */
      "Authenticate": (arg1, arg2) => {
        return window.go.auth.service.Authenticate(arg1, arg2);
      },
      /**
       * GetUser
       * @returns {Promise<User|Error>}  - Go Type: storage.User
       */
      "GetUser": () => {
        return window.go.auth.service.GetUser();
      },
      /**
       * Logout
       * @returns {Promise<void>} 
       */
      "Logout": () => {
        return window.go.auth.service.Logout();
      },
    },
  },

  "fs": {
    "service": {
      /**
       * CreateBackup
       * @returns {Promise<string|Error>}  - Go Type: string
       */
      "CreateBackup": () => {
        return window.go.fs.service.CreateBackup();
      },
      /**
       * GetAppHomePath
       * @returns {Promise<string>}  - Go Type: string
       */
      "GetAppHomePath": () => {
        return window.go.fs.service.GetAppHomePath();
      },
      /**
       * GetBackupDirectory
       * @returns {Promise<string>}  - Go Type: string
       */
      "GetBackupDirectory": () => {
        return window.go.fs.service.GetBackupDirectory();
      },
      /**
       * GetBackupList
       * @returns {Promise<Array.<Backup>|Error>}  - Go Type: []fs.Backup
       */
      "GetBackupList": () => {
        return window.go.fs.service.GetBackupList();
      },
      /**
       * GetDatabasePath
       * @returns {Promise<string>}  - Go Type: string
       */
      "GetDatabasePath": () => {
        return window.go.fs.service.GetDatabasePath();
      },
    },
  },

  "main": {
    "App": {
      /**
       * Greet
       * @param {string} arg1 - Go Type: string
       * @returns {Promise<string>}  - Go Type: string
       */
      "Greet": (arg1) => {
        return window.go.main.App.Greet(arg1);
      },
    },
  },

  "sqlite": {
    "assetRepository": {
      /**
       * CountAll
       * @returns {Promise<number>}  - Go Type: int64
       */
      "CountAll": () => {
        return window.go.sqlite.assetRepository.CountAll();
      },
      /**
       * CountHardware
       * @returns {Promise<number>}  - Go Type: int64
       */
      "CountHardware": () => {
        return window.go.sqlite.assetRepository.CountHardware();
      },
      /**
       * CountSoftware
       * @returns {Promise<number>}  - Go Type: int64
       */
      "CountSoftware": () => {
        return window.go.sqlite.assetRepository.CountSoftware();
      },
      /**
       * Delete
       * @param {Asset} arg1 - Go Type: storage.Asset
       * @returns {Promise<Error>}  - Go Type: error
       */
      "Delete": (arg1) => {
        return window.go.sqlite.assetRepository.Delete(arg1);
      },
      /**
       * GetAllSoftware
       * @returns {Promise<Array.<Asset>|Error>}  - Go Type: []storage.Asset
       */
      "GetAllSoftware": () => {
        return window.go.sqlite.assetRepository.GetAllSoftware();
      },
      /**
       * GetById
       * @param {number} arg1 - Go Type: uint
       * @returns {Promise<Asset>}  - Go Type: storage.Asset
       */
      "GetById": (arg1) => {
        return window.go.sqlite.assetRepository.GetById(arg1);
      },
      /**
       * Paginate
       * @param {string} arg1 - Go Type: string
       * @param {QueryOptions} arg2 - Go Type: storage.QueryOptions
       * @returns {Promise<Array.<Asset>|Error>}  - Go Type: []storage.Asset
       */
      "Paginate": (arg1, arg2) => {
        return window.go.sqlite.assetRepository.Paginate(arg1, arg2);
      },
      /**
       * Save
       * @param {Asset} arg1 - Go Type: storage.Asset
       * @returns {Promise<number|Error>}  - Go Type: uint
       */
      "Save": (arg1) => {
        return window.go.sqlite.assetRepository.Save(arg1);
      },
    },
    "manufRepository": {
      /**
       * CountAll
       * @returns {Promise<number>}  - Go Type: int64
       */
      "CountAll": () => {
        return window.go.sqlite.manufRepository.CountAll();
      },
      /**
       * Delete
       * @param {Manufacturer} arg1 - Go Type: storage.Manufacturer
       * @returns {Promise<Error>}  - Go Type: error
       */
      "Delete": (arg1) => {
        return window.go.sqlite.manufRepository.Delete(arg1);
      },
      /**
       * GetAll
       * @returns {Promise<Array.<Manufacturer>|Error>}  - Go Type: []storage.Manufacturer
       */
      "GetAll": () => {
        return window.go.sqlite.manufRepository.GetAll();
      },
      /**
       * GetById
       * @param {number} arg1 - Go Type: uint
       * @returns {Promise<Manufacturer>}  - Go Type: storage.Manufacturer
       */
      "GetById": (arg1) => {
        return window.go.sqlite.manufRepository.GetById(arg1);
      },
      /**
       * Paginate
       * @param {QueryOptions} arg1 - Go Type: storage.QueryOptions
       * @returns {Promise<Array.<Manufacturer>|Error>}  - Go Type: []storage.Manufacturer
       */
      "Paginate": (arg1) => {
        return window.go.sqlite.manufRepository.Paginate(arg1);
      },
    },
    "reportRepository": {
      /**
       * Paginate
       * @param {QueryOptions} arg1 - Go Type: storage.QueryOptions
       * @returns {Promise<Array.<Report>|Error>}  - Go Type: []storage.Report
       */
      "Paginate": (arg1) => {
        return window.go.sqlite.reportRepository.Paginate(arg1);
      },
      /**
       * Save
       * @param {Report} arg1 - Go Type: storage.Report
       * @returns {Promise<Error>}  - Go Type: error
       */
      "Save": (arg1) => {
        return window.go.sqlite.reportRepository.Save(arg1);
      },
    },
  },

  "vulnerability": {
    "service": {
      /**
       * GetLastCpe
       * @param {string} arg1 - Go Type: string
       * @returns {Promise<CpeResult|Error>}  - Go Type: vulnerability.CpeResult
       */
      "GetLastCpe": (arg1) => {
        return window.go.vulnerability.service.GetLastCpe(arg1);
      },
      /**
       * SearchCpeByKeyword
       * @param {string} arg1 - Go Type: string
       * @returns {Promise<Array.<Cpe>|Error>}  - Go Type: []vulnerability.Cpe
       */
      "SearchCpeByKeyword": (arg1) => {
        return window.go.vulnerability.service.SearchCpeByKeyword(arg1);
      },
      /**
       * SearchCpeByKeywordAsync
       * @param {string} arg1 - Go Type: string
       * @returns {Promise<string>}  - Go Type: string
       */
      "SearchCpeByKeywordAsync": (arg1) => {
        return window.go.vulnerability.service.SearchCpeByKeywordAsync(arg1);
      },
      /**
       * WatchResults
       * @returns {Promise<any>}  - Go Type: chan struct {}
       */
      "WatchResults": () => {
        return window.go.vulnerability.service.WatchResults();
      },
    },
  },

};
export default go;
