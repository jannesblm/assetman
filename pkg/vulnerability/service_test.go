package vulnerability

import (
	"encoding/json"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	ts "github.com/stretchr/testify/suite"
	"net/http"
	"net/http/httptest"
	"testing"
)

type suite struct {
	ts.Suite

	service *service
}

func (s *suite) SetupSuite() {
	s.service = NewService("", "")
}

func (s *suite) Test_ClientBuildsValidUrl() {
	s.service.baseUrl = "myurl.com"
	path := "this/is/a/path"

	expect := "myurl.com/this/is/a/path"
	require.EqualValues(s.T(), expect, s.service.buildUrl(path, make(map[string]string)))
}

func (s *suite) Test_ClientBuildsQuery() {
	s.service.baseUrl = "myurl.com"
	path := "this/is/a/path"
	query := map[string]string{
		"query1": "value1",
		"query2": "value2",
	}

	ordered := "myurl.com/this/is/a/path?query1=value1&query2=value2"
	swapped := "myurl.com/this/is/a/path?query2=value2&query1=value1"

	url := s.service.buildUrl(path, query)
	require.True(s.T(), assert.EqualValues(s.T(), ordered, url) || assert.EqualValues(s.T(), swapped, url))
}

func (s *suite) Test_ClientEncodesParams() {
	s.service.baseUrl = "myurl.com"
	path := "this/is/a/path"
	query := map[string]string{
		"query1": "val/ue1",
	}

	expect := "myurl.com/this/is/a/path?query1=val%2Fue1"
	require.EqualValues(s.T(), expect, s.service.buildUrl(path, query))
}

func (s *suite) Test_SearchCveByKeyword_PassesKeyword() {
	server := httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
		require.Contains(s.T(), req.URL.Query(), "keyword")

		jr, err := json.Marshal(cveResponse{})
		require.NoError(s.T(), err)

		res.Write(jr)
	}))

	s.service.baseUrl = server.URL
	_, err := s.service.SearchCveByKeyword("test")

	require.NoError(s.T(), err)
}

func (s *suite) Test_SearchCveByKeyword_HandlesError() {
	server := httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
		res.WriteHeader(500)
	}))

	s.service.baseUrl = server.URL
	_, err := s.service.SearchCveByKeyword("test")

	require.Error(s.T(), err)
}

func TestVulnerabilityService(t *testing.T) {
	ts.Run(t, new(suite))
}
